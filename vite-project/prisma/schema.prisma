generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model answer {
  answerId     Int       @id @default(autoincrement())
  chosenAnswer String    @db.VarChar(255)
  isCorrect    Boolean?
  questionId   Int?
  question     question? @relation(fields: [questionId], references: [questionId], onDelete: Cascade)

  @@index([questionId])
}

model course {
  courseId          Int     @id @default(autoincrement())
  courseName        String  @db.VarChar(255)
  courseDescription String? @db.VarChar(500)
  courseTag         String? @db.VarChar(100)
  userId            Int?
  user_             user_?  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  file              file[]

  @@index([userId])
}

model file {
  fileId       Int         @id @default(autoincrement())
  fileName     String      @db.VarChar(255)
  fileDeadline DateTime?
  fileURL      String?     @db.VarChar(500)
  courseId     Int?
  course       course?     @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  flashcard    flashcard[]
  keyterm      keyterm[]
  quiz         quiz[]

  @@index([courseId])
}

model flashcard {
  flashcardId       Int       @id @default(autoincrement())
  flashcardName     String    @db.VarChar(255)
  flashcardQ        String?   @db.VarChar(255)
  flashcardA        String?   @db.VarChar(255)
  flashcardDeadline DateTime?
  fileId            Int?
  file              file?     @relation(fields: [fileId], references: [fileId], onDelete: Cascade)

  @@index([fileId])
}

model habit {
  habitId      Int       @id @default(autoincrement())
  habitName    String    @db.VarChar(255)
  habitStatus  Boolean
  startingDate DateTime?
  userId       Int?
  user_        user_?    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId])
}

model keyterm {
  keytermId   Int     @id @default(autoincrement())
  keytermText String? @db.VarChar(255)
  keytermDef  String? @db.VarChar(500)
  fileId      Int?
  file        file?   @relation(fields: [fileId], references: [fileId], onDelete: Cascade)

  @@index([fileId])
}

model question {
  questionId    Int      @id @default(autoincrement())
  questionText  String   @db.VarChar(500)
  correctAnswer String   @db.VarChar(255)
  choices       String   @db.LongText
  quizId        Int?
  answer        answer[]
  quiz          quiz?    @relation(fields: [quizId], references: [quizId], onDelete: Cascade)

  @@index([quizId])
}

model quiz {
  quizId          Int        @id @default(autoincrement())
  numOfQuestions  Int?
  quizTitle       String     @db.VarChar(255)
  quizDescription String?    @db.VarChar(500)
  fileId          Int?
  userId          Int?
  question        question[]
  file            file?      @relation(fields: [fileId], references: [fileId], onDelete: Cascade)
  user_           user_?     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([fileId])
  @@index([userId])
}

model user_ {
  userId       Int      @id @default(autoincrement())
  email        String   @unique @db.VarChar(255)
  username     String   @db.VarChar(100)
  password     String   @db.VarChar(255)
  dateOfBirth  DateTime
  flag         Int
  subscription Int
  Major        String   @db.VarChar(255)
  course       course[]
  habit        habit[]
  quiz         quiz[]
}
